/// Creates a media query
///
/// @group Breakpoints
/// @param {Number} $breakpoint - The value from a breakpoint key.
/// @param {String} $type - Either 'min' or 'max' for the media query type.
@mixin create-mq($breakpoint, $type) {
  @if ($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$type}-width: $breakpoint * 1px) {
      @content;
    }
  }
}

/// Creates the column classes for the grid, using media queries and breakpoint keys as class modifiers
///
/// @group Breakpoints
/// @param {key} $modifier - The key from the breakpoints map in `_variables.scss`.
/// @param {Number} $grid-columns - The number of columns in the grid, taken from the $grid-columns variable in `_variables.scss`.
/// @param {Number} $breakpoint - The value from a breakpoint key.
@mixin create-col-classes($modifier, $grid-columns, $breakpoint) {
  @include create-mq($breakpoint, 'min') {
    @if toNumber(#{str-length($modifier)}) > 0 {
      .l-grid__column--#{$modifier}-offset-0 {
        margin-left: 0;
      }

      .l-grid__column--#{$modifier}-auto {
        flex: 0 0 auto;
      }
    }
    @else {
      .l-grid__column--offset-0 {
        margin-left: 0;
      }

      .l-grid__column--auto {
        flex: 0 0 auto;
      }
    }

    @for $i from 1 through $grid-columns {
      $width: ((100 / ($grid-columns / $i) ) * 1%);
      @if toNumber(#{str-length($modifier)}) > 0 {
        .l-grid__column--#{$modifier}-#{$i} {
          flex: 0 0 $width;
          max-width: $width;
        }

        .l-grid__column--#{$modifier}-offset-#{$i} {
          margin-left: $width;
        }
      }
      @else {
        .l-grid__column--#{$i} {
          flex: 0 0 $width;
          max-width: $width;
        }

        .l-grid__column-offset--#{$i} {
          margin-left: $width;
        }
      }
    }
  }
}

/// Mixin to create different media queries based on the breakpoints map in `_variables.scss`. The following can be created:
/// * Min-width: `@include breakpoint('medium') { };`
/// * Max-width: `@include breakpoint('large', 'down') { };`
/// * Single breakpoint only: `@include breakpoint('medium', 'only') { };`
/// * Min-width and max-width: `@include breakpoint('small', null, 'large') { };`
///
/// @param {String} $breakpoint - The breakpoint from the breakpoints map.
/// @param {String} $option [null] - 'down': max-width, 'only': single breakpoint only, null: min-width/ranged
/// @param {String} $max [null] - The maximum breakpoint to work with ranged media queries
///
/// @group Breakpoints
/// @require {variable} breakpoints
/// @author Liam Snowdon
@mixin breakpoint($breakpoint, $option: null, $max: null) {
  @if map-has-key($breakpoints, $breakpoint) {

    // min-width and max-width media query with flexible range
    @if ($option) {

      // max-width media query
      @if $option == down {
        @if ($max) {
          @warn "The $max parameter cannot be used with the 'down' option media query.";
        }
        @media screen and (max-width: #{map-get($breakpoints, $breakpoint) * 1px}) {
          @content;
        }
      }

      @else if $option == only {
        @if ($max) {
          @warn "The $max parameter cannot be used with the 'only' option media query.";
        }
        // Loop through $breakpoints map to find the index of the passed breakpoint
        @each $key, $value in $breakpoints {
          @if $value == map-get($breakpoints, $breakpoint) {
            $keys: map-keys($breakpoints); // Returns all the keys in the $breakpoints map
            $mapLength: length($breakpoints); // Returns the length of the $breakpoints map
            $currentIndex: index($breakpoints, ($key $value)); // Returns the current index of the $breakpoints map

            // Check to make sure the 'only' parameter is not being used with the largest breakpoint available
            @if $currentIndex == $mapLength {
              @error "The `only` option parameter cannot be used on the largest breakpoint. Try removing this option to use a min-width media query instead."
            }
            @else {
              // Finds the breakpoint above for the range between
              $maxKeyIndex: $currentIndex + 1;
              $maxKey: nth($keys, $maxKeyIndex);

              $minBreakpoint: $value;
              $maxBreakpoint: map-get($breakpoints, $maxKey);

              @media screen and (min-width: (#{$minBreakpoint * 1px})) and (max-width: #{$maxBreakpoint * 1px}) {
                @content;
              }
            }
          }
        }
      }

      @else {
        @error "Option not recognised. Available options are: `down`, `only` and `null`."
      }
    }

    @else if ($max) {
      @if map-has-key($breakpoints, $max) {
        $minBreakpoint: #{map-get($breakpoints, $breakpoint)};
        $maxBreakpoint: #{map-get($breakpoints, $max)};

        // Ensure both breakpoints are not the same
        @if $minBreakpoint == $maxBreakpoint {
          @error "The minimum breakpoint and maximum breakpoint must not be the same."
        }

        // Ensure that minimum breakpoint is larger than the maximum breakpoint
        $minBreakpointValue: toNumber(#{$minBreakpoint});
        $maxBreakpointValue: toNumber(#{$maxBreakpoint});

        @if $minBreakpointValue > $maxBreakpointValue {
          @error "The minimum breakpoint must not be larger than the maximum breakpoint."
        }

        @media screen and (min-width: #{$minBreakpointValue * 1px}) and (max-width: #{$maxBreakpointValue * 1px}) {
          @content;
        }
      }
      @else {
        @error "Max breakpoint not found. Please use one of the following: '#{map_keys($breakpoints)}'"
      }
    }
      // min-width media query
    @else {
      @media screen and (min-width: #{map-get($breakpoints, $breakpoint) * 1px}) {
        @content;
      }
    }
  }
    // print error in console if unknown breakpoint is used
  @else {
    @error "Breakpoint not found. Please use one of the following: '#{map_keys($breakpoints)}'"
  }
}